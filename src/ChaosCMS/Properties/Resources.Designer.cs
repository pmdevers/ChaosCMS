// <auto-generated />
namespace ChaosCMS
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Resources
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("ChaosCMS.Resources", typeof(Resources).GetTypeInfo().Assembly);

        /// <summary>
        /// An unknown failure has occurred.
        /// </summary>
        internal static string DefaultError
        {
            get { return GetString("DefaultError"); }
        }

        /// <summary>
        /// AddChaos must be called on the service collection.
        /// </summary>
        internal static string MustCallAddChaos
        {
            get { return GetString("MustCallAddChaos"); }
        }

        /// <summary>
        /// There is not page found at '{0}'.
        /// </summary>
        internal static string PageNotFound
        {
            get { return GetString("PageNotFound"); }
        }

        /// <summary>
        /// There is not page found at '{0}'.
        /// </summary>
        internal static string FormatPageNotFound(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PageNotFound"), p0);
        }

        /// <summary>
        /// Type {0} must derive from {1}&lt;{2}&gt;.
        /// </summary>
        internal static string InvalidManagerType
        {
            get { return GetString("InvalidManagerType"); }
        }

        /// <summary>
        /// Page must be larger then 1.
        /// </summary>
        internal static string NegativePage
        {
            get { return GetString("NegativePage"); }
        }

        /// <summary>
        /// ItemsPerPage exceeds the maximum of '{0}' items per page.
        /// </summary>
        internal static string MaxItemsPerPage
        {
            get { return GetString("MaxItemsPerPage"); }
        }

        /// <summary>
        /// The template '{0}' is not a valid.
        /// </summary>
        internal static string PageTemplateIsInvalid
        {
            get { return GetString("PageTemplateIsInvalid"); }
        }

        /// <summary>
        /// The template '{0}' is not a valid.
        /// </summary>
        internal static string FormatPageTemplateIsInvalid(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PageTemplateIsInvalid"), p0);
        }

        /// <summary>
        /// The url '{0}' is not a valid page name.
        /// </summary>
        internal static string PageUrlIsInvalid
        {
            get { return GetString("PageUrlIsInvalid"); }
        }

        /// <summary>
        /// The url '{0}' is not a valid page name.
        /// </summary>
        internal static string FormatPageUrlIsInvalid(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PageUrlIsInvalid"), p0);
        }

        /// <summary>
        /// The name '{0}' is not a valid page name.
        /// </summary>
        internal static string PageNameIsInvalid
        {
            get { return GetString("PageNameIsInvalid"); }
        }

        /// <summary>
        /// The name '{0}' is not a valid page name.
        /// </summary>
        internal static string FormatPageNameIsInvalid(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PageNameIsInvalid"), p0);
        }

        /// <summary>
        /// ItemsPerPage exceeds the maximum of '{0}' items per page.
        /// </summary>
        internal static string FormatMaxItemsPerPage(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MaxItemsPerPage"), p0);
        }

        /// <summary>
        /// Type {0} must derive from {1}&lt;{2}&gt;.
        /// </summary>
        internal static string FormatInvalidManagerType(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidManagerType"), p0, p1, p2);
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}